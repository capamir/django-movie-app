# Django API Project Documentation (movie_api)

## Overview
This project, `movie_api`, is a Django-based API inspired by IMDb, designed to manage movies and user interactions. It includes two apps: `movies` for handling movie data and `users` for managing authentication and profiles. The API provides REST and GraphQL endpoints for movies, genres, and actors, and REST endpoints for user management. It supports user registration with OTP verification, JWT-based authentication, and favorite/watched movie lists. Swagger (`drf-yasg`) documents REST endpoints, and GraphiQL supports GraphQL testing. A separate `customer_support` project queries movie data via the GraphQL endpoint. Views use DRF’s `ModelViewSet` with custom permissions (public GET, admin-only for other methods).

## Project Setup
The project uses Django, DRF, `django-rest-framework-simplejwt`, Pillow (images), `drf-yasg` (Swagger), and `graphene-django` (GraphQL). It has two apps: `movies` and `users`. Media files (movie images) are stored in `media/` and served at `/media/`. The `movie_api/settings.py` registers apps, sets up JWT, Swagger, GraphQL, and media handling. Project URLs (`movie_api/urls.py`) route to `/api/movies/` (REST), `/api/users/` (REST), `/swagger/` (Swagger UI), `/redoc/` (ReDoc), and `/graphql/` (GraphQL).

## Movies App
The `movies` app manages movie-related data via REST and GraphQL.

- **Data Models**:
  - `Genre`: Stores genre names (e.g., Action, Drama).
  - `Actor`: Stores actor names.
  - `Movie`: Stores title, plot summary, image (optional), rating (0-5), genres, actors, and timestamp. Linked via many-to-many relationships. Includes docstrings and `help_text`.

- **REST Endpoints**:
  - Movies: `/api/movies/` (list, create), `/api/movies/<id>/` (retrieve, update, delete).
  - Genres: `/api/movies/genres/` (list, create), `/api/movies/genres/<id>/` (retrieve, update, delete).
  - Actors: `/api/movies/actors/` (list, create), `/api/movies/actors/<id>/` (retrieve, update, delete).
  - Uses `ModelViewSet` with `IsAdminOrReadOnly` (public GET, admin-only POST/PUT/DELETE).

- **GraphQL Endpoints**:
  - Queries: `allMovies` (filter by title, genre, actor, rating), `allGenres` (filter by name), `allActors` (filter by name), `movie(id)`, `genre(id)`, `actor(id)`. Public access.
  - Mutations: `createMovie`, `createGenre`, `createActor`. Admin-only via `IsAdminOrReadOnly`.
  - Accessible at `/graphql/` with GraphiQL interface.
  - Used by the `customer_support` project to fetch movie data.

- **Functionality**:
  - Public users can view movies, genres, and actors (REST/GraphQL).
  - Admin users (JWT, `is_staff=True`) can create/update/delete via REST or GraphQL.
  - Movie responses include nested genre/actor data; creation accepts IDs.

## Users App
The `users` app handles authentication and profile management via REST.

- **Data Models**:
  - `UserProfile`: Linked to Django’s `User`, stores phone number and favorite/watched movies. Includes docstrings and `help_text`.
  - `OtpCode`: Stores OTP codes with phone numbers and timestamps.

- **REST Endpoints**:
  - Register: `/api/users/register/` (create user, public).
  - Profiles: `/api/users/profiles/` (list, create), `/api/users/profiles/<id>/` (retrieve, update, delete; non-admins restricted to own profile).
  - Login: `/api/users/login/` (JWT tokens with user data: ID, username, email).
  - Refresh token: `/api/users/token/refresh/`.
  - Verify OTP: `/api/users/otp/verify/` (activates user, public).
  - Uses `ModelViewSet` for registration/profiles with `IsAdminOrReadOnly` (except `register`, `otp/verify` use `AllowAny`).

- **Functionality**:
  - Registration creates an inactive user (`is_active=False`).
  - OTP verification activates the user.
  - Profile management allows viewing/updating favorite/watched movies (non-admins limited to own profile).

## Integration with Customer Support Project
A separate Django project, `customer_support`, queries movie data from this project’s `/graphql/` endpoint to link support tickets to movies. It uses the `allMovies`, `movie`, `allGenres`, and `allActors` queries to fetch movie details for ticket creation.

## Swagger and GraphQL
- **Swagger**: Integrated via `drf-yasg` at `/swagger/` (Swagger UI) and `/redoc/` (ReDoc) for REST endpoints, with JWT support (`Bearer` token).
- **GraphQL**: Integrated via `graphene-django` at `/graphql/` with GraphiQL for testing. Supports public queries and admin-only mutations for movies.

## Data Population Script
A Python script (`populate_movies.py`) populates the database with:
- 13 genres (e.g., Action, Drama).
- 15 actors (e.g., Leonardo DiCaprio, Meryl Streep).
- 100 movies with random titles, plot summaries, ratings (0.5-5.0), 1-3 genres, and 2-5 actors.
- Uses REST endpoints, authenticates with an admin user, requires `requests` library.

## Example Workflow
1. **Register**: POST to `/api/users/register/` with username, email, password, phone number (user inactive).
2. **Verify OTP**: POST to `/api/users/otp/verify/` to activate user.
3. **Login**: POST to `/api/users/login/` for JWT tokens and user data.
4. **Manage Profile**: Use `/api/users/profiles/<id>/` (REST) to view/update favorite/watched movies (admin-only for non-GET).
5. **Access Movies**: Use `/api/movies/` (REST) or `allMovies` (GraphQL) to view; create/update/delete requires admin.
6. **Customer Support**: The `customer_support` project queries `/graphql/` to fetch movie data for tickets.
7. **Explore API**: Use `/swagger/` for REST, `/graphql/` for GraphQL.
8. **Populate Data**: Run `populate_movies.py` with admin credentials.

## Key Notes
- **Permissions**: `IsAdminOrReadOnly` allows public GET (REST/GraphQL queries); POST/PUT/DELETE require admin (`is_staff=True`) except for user registration, OTP verification, and ticket creation (authenticated users in `customer_support`).
- **OTP Generation**: Requires an SMS service (e.g., Twilio), not implemented.
- **Image Handling**: Movie images optional, stored in `media/movies/` using Pillow.
- **Swagger/GraphQL**: Swagger documents REST; GraphiQL supports GraphQL testing.
- **Data Population**: Script uses sample data; consider TMDB API for realistic data.
- **Customer Support Integration**: The `customer_support` project queries this project’s `/graphql/` endpoint to fetch movie IDs and details.
- **Extensibility**: Add search/filter endpoints or password reset.
- **Deployment**: Use PostgreSQL and AWS S3 for production.
- **Testing**: Test with Postman, Swagger, or GraphiQL; use DRF’s `APITestCase`.

## Next Steps
- Implement OTP generation/sending with Twilio in `movie_api`.
- Enhance `customer_support` with UI or additional ticket features.
- Rewrite population script for GraphQL mutations.
- Add search/filter for tickets in `customer_support`.
- Write unit tests for both projects.
- Configure production settings for both projects.